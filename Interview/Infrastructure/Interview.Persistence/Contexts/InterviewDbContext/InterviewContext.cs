// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Interview.Domain.Entities.Models;
using Interview.Domain.EntityFrameworkConfigurations;
using Interview.Persistence.ServiceExtensions;
using Microsoft.EntityFrameworkCore;

namespace Interview.Persistence.Contexts.InterviewDbContext;

public class InterviewContext : DbContext
{
    public InterviewContext()
    {
    }

    public InterviewContext(DbContextOptions<InterviewContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Candidate> Candidate { get; set; }

    public virtual DbSet<CandidateDocument> CandidateDocument { get; set; }

    public virtual DbSet<Category> Category { get; set; }

    public virtual DbSet<Level> Level { get; set; }

    public virtual DbSet<Position> Position { get; set; }

    public virtual DbSet<Question> Question { get; set; }

    public virtual DbSet<Session> Session { get; set; }

    public virtual DbSet<SessionQuestion> SessionQuestion { get; set; }

    public virtual DbSet<Structure> Structure { get; set; }

    public virtual DbSet<StructureType> StructureType { get; set; }

    public virtual DbSet<Vacancy> Vacancy { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)

    => optionsBuilder.UseSqlServer(ServiceExtension.ConnectionString);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {

        modelBuilder.ApplyConfiguration(new CandidateConfiguration());

        modelBuilder.ApplyConfiguration(new CandidateDocumentConfiguration());

        modelBuilder.ApplyConfiguration(new LevelConfiguration());

        modelBuilder.ApplyConfiguration(new PositionConfiguration());

        modelBuilder.ApplyConfiguration(new QuestionConfiguration());

        modelBuilder.ApplyConfiguration(new SessionConfiguration());

        modelBuilder.ApplyConfiguration(new SessionQuestionConfiguration());

        modelBuilder.ApplyConfiguration(new CategoryConfiguration());

        modelBuilder.ApplyConfiguration(new StructureConfiguration());

        modelBuilder.ApplyConfiguration(new StructureTypeConfiguration());

        modelBuilder.ApplyConfiguration(new VacancyConfiguration());


        //modelBuilder.Entity<Candidate>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Candidat__3214EC073F74B4B5");

        //    entity.HasOne(d => d.CandidateDocument).WithMany(p => p.Candidate)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_CandidateDocument_forCandidates");
        //});

        //modelBuilder.Entity<CandidateDocument>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Candidat__3214EC074806C73F");
        //});

        //modelBuilder.Entity<Category>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Category__3214EC076EAA47F9");
        //});

        //modelBuilder.Entity<Level>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Level__3214EC07F3B419E1");
        //});

        //modelBuilder.Entity<Position>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Position__3214EC0781880E1A");
        //});

        //modelBuilder.Entity<Question>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Question__3214EC0716A1AFF0");

        //    entity.HasOne(d => d.Category).WithMany(p => p.Question)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_CategoryId_forQuestion");

        //    entity.HasOne(d => d.Level).WithMany(p => p.Question)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_LevelId_forQuestion");

        //    entity.HasOne(d => d.Structure).WithMany(p => p.Question)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_StructureId_forQuestion");
        //});

        //modelBuilder.Entity<Session>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Session__3214EC07709C704D");

        //    entity.Property(e => e.EndValue).HasDefaultValueSql("((0.0))");

        //    entity.HasOne(d => d.Candidate).WithMany(p => p.Session)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_CandidateId_forSession");

        //    entity.HasOne(d => d.Vacancy).WithMany(p => p.Session)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_VacancyId_forSession");
        //});

        //modelBuilder.Entity<SessionQuestion>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__SessionQ__3214EC075E4B8B68");

        //    entity.Property(e => e.Value).HasDefaultValueSql("((0))");

        //    entity.HasOne(d => d.Question).WithMany(p => p.SessionQuestion)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_QuestionId_forSessionQuestion");

        //    entity.HasOne(d => d.Session).WithMany(p => p.SessionQuestion)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_SessionId_forSessionQuestion");
        //});

        //modelBuilder.Entity<Structure>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Structur__3214EC07EA11E9AD");

        //    entity.HasOne(d => d.StructureType).WithMany(p => p.Structure)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_StructureType_forStructure");
        //});

        //modelBuilder.Entity<StructureType>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Structur__3214EC07BC311B86");
        //});

        //modelBuilder.Entity<Vacancy>(entity =>
        //{
        //    entity.HasKey(e => e.Id).HasName("PK__Vacancy__3214EC077B09E63F");

        //    entity.HasOne(d => d.Position).WithMany(p => p.Vacancy)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_PositionId_forVacancy");

        //    entity.HasOne(d => d.Structure).WithMany(p => p.Vacancy)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_StructureId_forVacancy");
        //});

    }


}