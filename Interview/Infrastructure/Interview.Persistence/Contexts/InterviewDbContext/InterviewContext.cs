// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Interview.Persistence.ServiceExtensions;
using Microsoft.EntityFrameworkCore;
using Interview.Domain.Entities.Models;

namespace Interview.Persistence.Contexts.InterviewDbContext;

public partial class InterviewContext : DbContext
{
    public InterviewContext()
    {
    }

    public InterviewContext(DbContextOptions<InterviewContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Candidate> Candidates { get; set; }

    public virtual DbSet<CandidateQuestion> CandidateQuestions { get; set; }

    public virtual DbSet<CandidateVacancy> CandidateVacancies { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<JobDegree> JobDegrees { get; set; }

    public virtual DbSet<OpenQuestion> OpenQuestions { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionCategory> QuestionCategories { get; set; }

    public virtual DbSet<QuestionLevel> QuestionLevels { get; set; }

    public virtual DbSet<QuestionValue> QuestionValues { get; set; }

    public virtual DbSet<Sector> Sectors { get; set; }

    public virtual DbSet<Vacancy> Vacancies { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer(ServiceExtension.ConnectionString);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.IdBranch).HasName("PK__Branch__54205B04B483BF4F");

            entity.HasOne(d => d.SectorIdForBranchNavigation).WithMany(p => p.Branches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SectorId_forBranch");
        });

        modelBuilder.Entity<Candidate>(entity =>
        {
            entity.HasKey(e => e.IdCandidate).HasName("PK__Candidat__D559897327E75C56");
        });

        modelBuilder.Entity<CandidateQuestion>(entity =>
        {
            entity.HasKey(e => e.IdCandidateQuestion).HasName("PK__Candidat__D90DBFBC52CA5047");

            entity.HasOne(d => d.CandidateIdForCandidateQuestionNavigation).WithMany(p => p.CandidateQuestions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CandidateId_forCandidateQuestion");

            entity.HasOne(d => d.QuestionIdForCandidateQuestionNavigation).WithMany(p => p.CandidateQuestions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuestionId_forCandidateQuestion");
        });

        modelBuilder.Entity<CandidateVacancy>(entity =>
        {
            entity.HasKey(e => e.IdCandidateVacancy).HasName("PK__Candidat__A5DE01AE6FFD0185");

            entity.HasOne(d => d.CandidateIdForCandidateVacancyNavigation).WithMany(p => p.CandidateVacancies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CandidateId_forCandidateVacancy");

            entity.HasOne(d => d.VacancyIdForCandidateVacancyNavigation).WithMany(p => p.CandidateVacancies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VacancyId_forCandidateVacancy");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.IdDepartment).HasName("PK__Departme__DF1E6E4B75412E18");

            entity.HasOne(d => d.BranchIdForDepartmentNavigation).WithMany(p => p.Departments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchId_forDepartment");
        });

        modelBuilder.Entity<JobDegree>(entity =>
        {
            entity.HasKey(e => e.IdJobDegree).HasName("PK__JobDegre__2F2BEECE35DD5D15");
        });

        modelBuilder.Entity<OpenQuestion>(entity =>
        {
            entity.HasKey(e => e.IdOpenQuestion).HasName("PK__OpenQues__5708C8DD3E0D25F3");

            entity.Property(e => e.Result).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.IdQuestion).HasName("PK__Question__FB3BDD30D1A8948D");

            entity.HasOne(d => d.OpenQuestionIdForQuestionNavigation).WithMany(p => p.Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OpenQuestionId_forQuestion");

            entity.HasOne(d => d.QuestionCategoryIdForQuestionNavigation).WithMany(p => p.Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuestionCategoryId_forQuestion");

            entity.HasOne(d => d.QuestionLevelIdForQuestionNavigation).WithMany(p => p.Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuestionLevelId_forQuestion");

            entity.HasOne(d => d.QuestionValueIdForQuestionNavigation).WithMany(p => p.Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuestionValueId_forQuestion");
        });

        modelBuilder.Entity<QuestionCategory>(entity =>
        {
            entity.HasKey(e => e.IdQuestionCategory).HasName("PK__Question__8A63A90E518FDA5B");
        });

        modelBuilder.Entity<QuestionLevel>(entity =>
        {
            entity.HasKey(e => e.IdQuestionLevel).HasName("PK__Question__855AE5C54DB64729");
        });

        modelBuilder.Entity<QuestionValue>(entity =>
        {
            entity.HasKey(e => e.IdQuestionValue).HasName("PK__Question__639F6E19E8F4CCB6");
        });

        modelBuilder.Entity<Sector>(entity =>
        {
            entity.HasKey(e => e.IdSector).HasName("PK__Sector__D0011C182C76EF69");
        });

        modelBuilder.Entity<Vacancy>(entity =>
        {
            entity.HasKey(e => e.IdVacancy).HasName("PK__Vacancy__A58A0669A3852CF4");

            entity.HasOne(d => d.DepartmentIdForVacancyNavigation).WithMany(p => p.Vacancies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DepartmentId_forVacancy");

            entity.HasOne(d => d.JobDegreeIdForVacancyNavigation).WithMany(p => p.Vacancies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobDegreeId_forVacancy");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}